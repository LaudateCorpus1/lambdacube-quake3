SETUP
  void trap_R_LoadWorldMap( const char *mapname );

  // all media should be registered during level startup to prevent
  // hitches during gameplay
  qhandle_t trap_R_RegisterModel( const char *name );       // returns rgb axis if not found
  qhandle_t trap_R_RegisterSkin( const char *name );        // returns all white if not found
  qhandle_t trap_R_RegisterShader( const char *name );      // returns all white if not found
  qhandle_t trap_R_RegisterShaderNoMip( const char *name ); // returns all white if not found

  void trap_R_RemapShader( const char *oldShader, const char *newShader, const char *timeOffset );

FRAME DRAWING
  // a scene is built up by calls to R_ClearScene and the various R_Add functions.
  // Nothing is drawn until R_RenderScene is called.
  void  trap_R_ClearScene( void );
  void  trap_R_AddRefEntityToScene( const refEntity_t *re );

  // polys are intended for simple wall marks, not really for doing
  // significant construction
  void  trap_R_AddPolyToScene( qhandle_t hShader , int numVerts, const polyVert_t *verts );
  void  trap_R_AddLightToScene( const vec3_t org, float intensity, float r, float g, float b );
  void  trap_R_RenderScene( const refdef_t *fd );
  void  trap_R_SetColor( const float *rgba ); NULL = 1,1,1,1
  void  trap_R_DrawStretchPic( float x, float y, float w, float h, float s1, float t1, float s2, float t2, qhandle_t hShader );

QUERY
  void  trap_R_ModelBounds( clipHandle_t model, vec3_t mins, vec3_t maxs );
  int   trap_R_LerpTag( orientation_t *tag, clipHandle_t mod, int startFrame, int endFrame, float frac, const char *tagName );

DEAD CODE (NOT USED IN QUAKE 3 GAME)
  void  trap_R_AddAdditiveLightToScene( const vec3_t org, float intensity, float r, float g, float b );
  qboolean  trap_R_inPVS( const vec3_t p1, const vec3_t p2 );
  int   trap_R_LightForPoint( vec3_t point, vec3_t ambientLight, vec3_t directedLight, vec3_t lightDir );
