FOCUS: architecture & API

replace q3mapviewer
  - 3d look and move
  - collision
  - gravity
  - debug render
  - audio support
  - render player's current weapon

render system
  small and obvious:
  big:
    - collision:
        entity's shape (box,sphere,ray or rays)
        collides with static level and each other
        collision result (content flags, entity type) is passed to interact
    - character support: player character
      - load materials
      - cache loaded model (GPUMD3) to speed up instantiation (CharacterInstance); store multiple models to feed instances from
    - make the interface monadic; explicit resource allocation and release
    - precache support
    - new renderable: BSPInlineModel
  high level, to be elaborated
    - pass optional debug options to render system; e.g. collision geometry and lightmap only
    - control game character animation
    - performance benchmark
    - restructure code: engine, game; design engine architecture (submodules, api, sample code)

    - draw hud
    - audio support
    - font/text support

    - manual pipeline optimization:
      ok - optimize lambdacube-gl: skip pipeline setup commands before empty slots; avoid useless state changes; this may require to change the IR
            result: minor preformance improvement
      - use per object texture unforms for each layers of stage textures
      - use dedicated shader for default materials: lightmap + diffuse; diffuse
      - precompile and cache all non-default shaders
      - minimize render call count: build shared vertex and index buffer; use instanced rendering; use uniform block or instanced arrays; build texture atlas
        draw call >= shader count
        draw call = different models * instance count; however instance count may differ for models

game
  small and obvious:
    - 3d spectator camera, 3d item positions
      new input: mouse position
      questions: how to pass camera info to render system => add to scene
    - window resize
  big:
    - split rendering and game logic into separated threads
    - collision detection
    - gravity
    - door handling; need inline model support
    - refactor entities to use q3 item types

refactor notes:
  - use proper resource monad
  - manage subsystems elegantly
  Binary: BSP.hs, MD3.hs
    - factor out common functions from BSP and MD3 loaders
  Megaparsec: Character.hs. Entity.hs, ShaderParser.hs
    - factor out common parts
    - use same floating number parser

  Material.hs
    - rename CommonAttrs and StageAttrs (also modify Graphics.lc)

install guide:
  - local build: lambdacube-quake3:
      works well, it finds the local lc directory and lambdacube-compiler finds the prelude in the installed place
  - test local build with lambdacube-compiler and lambdacube-quake3
      problem: lambdacube-compiler does not find prelude
      solution: copy the prelude to lc
      note: lambdacube-quake3 devs dont need this, only compiler+quake3 devs

----
  - sky rendering
  - fog rendering
  - projectile rendering
  - particle system support
      - explosion
      - smoke
  - deferred rendering
  - autosprite support

debug rendering:
  - color bsp models
  - draw brushes
  - draw model's min/max box
  - draw bsp leaf min/max box
  - color surfaces (with same material)
  - draw collision rays

game engine:
  - level collision support (e.g. http://openzone.googlecode.com/git-history/f73bb8dfe8e6a16c13d39aba1c8f6537ee263d07/doc/Quake3BSP.html)
      - ray, sphere, box collision with each other
          required for e.g.: bullet - model, player - ammo collision
      - collision for md3 models
      - fix teleport collision
      - implement q3 entity system
          - items
          - spawns
          - generic entity collision shape (bsp inline model) trigger support
          questions:
            how does bsp surface and bsd inline model rendering work?
            are the doors inline bsp models? yes. how are they moved? per object worldMat.

      - character <-> item collision (e.g. ammo)
      - fix collision with patches
      - improve camera move
        - swim in water
      - optimize collision code, fix memory leak
  - spectator camera
  done - character camera with gravity and collision
  - third person character camera
  - attach weapon to character hand according tags
  - animate items (e.g. ammos and armors)
  done - level sounds
  - simulate level actors (e.g. doors, jump pads)

quake sprint May 12-23:
  - door opening/closing
  - implement item entity handling (placement + spawn)
  - implement item collision
  - weapon and firing
  - logic for items (e.g. armor, health, quad damage)
  - generate collision geometry for bezier sufraces

networking: http://www.gdcvault.com/play/1022195/Physics-for-Game-Programmers-Networking

----
separate graphics and collision code
  server side:
    bsp load
    md3 load
    collision
    entity handling - data for game rules

  client side:
    rendering

milestone 1:
  client - server
  spectator camera with collision

documentation:
  http://wiki.ioquake3.org/Entities
  http://fabiensanglard.net/quake3/
  http://caia.swin.edu.au/reports/110209A/CAIA-TR-110209A.pdf
  