refactor the code
  - to be a game engine
  - support multiple renderers:
      - lambdacube edsl
      - lambdacube dsl
      - gpipe2

rendering improvements:
  done - character animation
      done - parse animation.cfg
      done - assemble characters according tags
  - sky rendering
  - fog rendering
  - projectile rendering
  - particle system support
      - explosion
      - smoke
  - deferred rendering
  - autosprite support

debug rendering:
  - color bsp models
  - draw brushes
  - draw model's min/max box
  - draw bsp leaf min/max box
  - color surfaces (with same material)
  - draw collision rays

game engine:
  - level collision support (e.g. http://openzone.googlecode.com/git-history/f73bb8dfe8e6a16c13d39aba1c8f6537ee263d07/doc/Quake3BSP.html)
      done - trace collision function
      done - colliding camera
      done - add remaining collision primitives (e.g. box, sphere)
      done - render bounding box
      done - render bounding sphere
      - generate collision geometry for bezier sufraces
      - ray, sphere, box collision with each other
          required for e.g.: bullet - model, player - ammo collision
      - collision for md3 models
      - fix teleport collision
      - implement item collision
      - door opening/closing
      - implement q3 entity system
          - items
          - spawns
          - generic entity collision shape (bsp inline model) trigger support
          questions:
            how does bsp surface and bsd inline model rendering work?
            are the doors inline bsp models? yes. how are they moved? per object worldMat.

      - character <-> item collision (e.g. ammo)
      - fix collision with patches
      - improve camera move
        - swim in water
      - optimize collision code, fix memory leak
  - spectator camera
  - character camera with gravity and collision
  - third person character camera
  - attach weapon to character hand according tags
  - animate items (e.g. ammos and armors)
  - level sounds
  - simulate level actors (e.g. doors, jump pads)
  - weapon and firing
  - logic for items (e.g. armor, health, quad damage)

networking: http://www.gdcvault.com/play/1022195/Physics-for-Game-Programmers-Networking

----
separate graphics and collision code
  server side:
    bsp load
    md3 load
    collision
    entity handling - data for game rules

  client side:
    rendering

milestone 1:
  client - server
  spectator camera with collision

