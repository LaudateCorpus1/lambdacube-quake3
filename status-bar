void CG_Draw3DModel( float x, float y, float w, float h, qhandle_t model, qhandle_t skin, vec3_t origin, vec3_t angles )
void CG_DrawStatusBar( void )
void CG_DrawField (int x, int y, int width, int value)

cgs.media.numberShaders

	static char		*sb_nums[11] = {
		"gfx/2d/numbers/zero_32b",
		"gfx/2d/numbers/one_32b",
		"gfx/2d/numbers/two_32b",
		"gfx/2d/numbers/three_32b",
		"gfx/2d/numbers/four_32b",
		"gfx/2d/numbers/five_32b",
		"gfx/2d/numbers/six_32b",
		"gfx/2d/numbers/seven_32b",
		"gfx/2d/numbers/eight_32b",
		"gfx/2d/numbers/nine_32b",
		"gfx/2d/numbers/minus_32b",
	};

	for ( i=0 ; i<11 ; i++) {
		cgs.media.numberShaders[i] = trap_R_RegisterShader( sb_nums[i] );
	}

#define	CHAR_WIDTH			32
#define	CHAR_HEIGHT			48

#define STAT_MINUS			10	// num frame for '-' stats digit

void CG_DrawPic( float x, float y, float width, float height, qhandle_t hShader ) {
	CG_AdjustFrom640( &x, &y, &width, &height );
	trap_R_DrawStretchPic( x, y, width, height, 0, 0, 1, 1, hShader );
}

void *RB_StretchPic ( const void *data )

TODO:
  done - add quad cache
  done - add quad cache instance update code
  done - implement quad instance using buffer interface
  done - update instance data
  done - color handling
  done - glortho
  - clear depth per scene
  - complete player state
  - resource cache list
  - complete item handling
  - statistics, awards
  - complete status bar
